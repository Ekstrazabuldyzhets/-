разбор файла - data_parsing-checkpoint.py
===================================================================================================================================================================
1. Импорты и настройка
python
import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from multiprocessing import Pool
from tqdm import tqdm
import logging
===================================================================================================================================================================
Multiprocessing - для параллельной обработки файлов
tqdm - для визуализации прогресса
logging - для записи логов выполнения
===================================================================================================================================================================
1) в функции <<if __name__ == '__main__': >> сперва
  - идет получение списка температурных директорий     
    # temperatures = ['25degC', '35degC', '45degC']
  - Обработка C20 калибровочных файлов, запускается функция << process_c20_files(T): >>, 
    в итоге в каждой parsed_data_directory/T/ создается C20_calibration_parsed.csv; Создается пул из 4 процессов; 
    Для каждой температуры запускается асинхронная задача; tqdm отслеживает прогресс (3 задачи для 3 температур)
  - подготовка задач для обработки всех файлов: проходимся по всем найденным папкам temperatures и фиксируем пути к каждой конкретной температурной директории;
    ищем все CSV файлы в дерикториях; обрабатываем каждый файл --> заполняя список tasks к следующему виду:
                                                                tasks = [
                                                                    # 35°C файлы  
                                                                    ('C20_calibration', '35degC'),
                                                                    ('test1', '35degC'),
                                                                    ('test2', '35degC'),
                                                                ]
  - исследуем файлы перебирая tasks, реализуя параллельную обработку всех тестовых файлов, запускается функция << process_file((csv_file_name, T)): >>

2) в функции << process_c20_files(T): >> сперва
  - Поиск C20 файла в сырых данных
  - Обработка найденного C20 файла, запускается функция << parse_raw_data >>, реализующая преобразование начальных, сырых данных к виду со столбцами:
    Timestamp,Time [min],Time [s],Voltage [V],Current [A],Temperature [degC],Capacity [Ah]

2.1) в функции << parse_raw_data() >> сперва на вход фалы вида: Time Stamp,Prog Time,Voltage,Current,Temperature,Capacity
  - Чтение файлов с поиском строки с заголовками столбцов: поиск строки с заголовками столбцов; извлекаем строку - название столбцов; 
    извлекаем строки только данными
  - Обрабатываем данные, проходясь по всем строкам с данными: преобразуем данные в стобце Timestamp в секунды и норамлизуем время для минут и секунд; 
    извлекаем основные числовые данные Voltage [V],Current [A],Temperature [degC],Capacity [Ah]
  - Вместе с тем создаем новый DataFrame с преобразованными данными:
                                              df = pd.DataFrame({
                                                  'Timestamp': abs_timestamp_data,           # Абсолютное время
                                                  'Time [min]': normalized_minutes,          # Относительное время в минутах
                                                  'Time [s]': normalized_seconds,            # Относительное время в секундах  
                                                  'Voltage [V]': voltage_values,             # Напряжение в Вольтах
                                                  'Current [A]': current_values,             # Ток в Амперах
                                                  'Temperature [degC]': temperature_values,  # Температура в °C
                                                  'Capacity [Ah]': capacity_values,          # Емкость в Ампер-часах
                                              })

3) в функции << process_file((csv_file_name, T)): >> сперва
  - Создаем пути к директориям: ../LG_HG2_parsed/25degC/; ../LG_HG2_processed/25degC/; ../LG_HG2_parsed_plots/25degC/; ../LG_HG2_processed_plots/25degC/;
  - Запускаем парсинг сырых данных при помощи функции << parse_raw_data >>, реализующей преобразование начальных, сырых данных к виду со столбцами:
    Timestamp,Time [min],Time [s],Voltage [V],Current [A],Temperature [degC],Capacity [Ah]
  = Созданем графиков без SOC: (напряжение, ток, температура, емкость)
  - Поиск и загрузка калибровочных данных(C20) для расчета значения SOC: 
    получаем функции интерполяции при помощи функции << get_pOCV_SOC_interp_fn(c20_file_path) >>;
    получаем максимальные значения емкости при помощи функции << get_max_capacities(c20_file_path) >>;
    реализуем кулоновский подсчет накопленной емкости: 
                                                                Ёмкость (Ah) = Ток (A) × Время (ч);
    наконец определяем начальный SOC при помощи функции << get_initial_soc(df, charge_soc_fn, discharge_soc_fn, current_col, voltage_col) >>, а затем при
    помощи итерационного расчета находим SOC для каждой точки данных
                                                              Начальный SOC = 0.95 (определен по напряжению)
                                                              Макс. емкость разряда = 2.8 Ah
                                                              Макс. емкость заряда = 2.9 Ah
                                                              
                                                              Время | Ток | Накоп. емкость | Расчет SOC
                                                              0.0   | 0.0 | 0.000          | 0.950 (начальный)
                                                              0.1   | -2.0| -0.00334       | 0.950 - (0.00334/2.8) = 0.9488
                                                              0.2   | -2.0| -0.00668       | 0.950 - (0.00668/2.8) = 0.9476
  - Постобработка данных: Экспоненциальное скользящее среднее убирает шум в данных SOC; удаление дубликатов.
  - Cохранение результатов в файл_processed.csv' и гарфиков SoC

3.1) в функции << get_pOCV_SOC_interp_fn(c20_file_path) >> сперва
  - Загрузка данных C20 и обработка данных
  - Фильтруем данне, отбираются все строки где ток (заряд) отрицательный; нормализуем емкость
  - Расчет SOC для разряда Формула: SOC = 1 - (|текущая_емкость| / |максимальная_емкость_разряда|)
  - Удаляем возможные выбросы напряжения выше максимального -->
  - Создание функции интерполяции для разряда!!!!!!
                                                  x = df_discharge[voltage_col] - напряжение как входной параметр
                                                  y = df_discharge[soc_col] - SOC как выходное значение
                                                  bounds_error=False - не вызывать ошибку при выходе за границы
                                                  fill_value="extrapolate" - экстраполировать значения за пределами данных
  - Фильтруем данне, отбираются все строки где ток (заряд) положительный; нормализуем емкость
  - Удаляем возможные выбросы напряжения выше максимального --> аномально высокие значения напряжения, которые не соответствуют физике батареи, 
    мешают, нарушают интерполяцию и дают неверные значения SOC.
  - Создание функции интерполяции для разряда!!!!!!
                                                  x = df_charge[voltage_col] - напряжение как входной параметр
                                                  y = df_charge[soc_col] - SOC как выходное значение
                                                  bounds_error=False - не вызывать ошибку при выходе за границы
                                                  fill_value="extrapolate" - экстраполировать значения за пределами данных

3.2) в функции << get_max_capacities(c20_file_path) >> сперва
  - Загрузка данных C20 и обработка данных
  - Разделение данных на две части до той точки где произошел переход из разряда в заряд
  - Расчет максимальных емкостей как для ЗАРЯДА так и для РАЗРЯДА

3.3) в функции << get_initial_soc(df, charge_soc_fn, discharge_soc_fn, current_col, voltage_col) >> сперва
  - Получение начального напряжения
  - Поиск первого ненулевого тока
                                                              Index | Current [A]
                                                              ----- | -----------
                                                              0     | 0.000 Исключено (ток = 0)
                                                              1     | -2.000 Включено
                                                              2     | -2.000 Включено
                                                              3     | -1.500 Включено
  - Определение SOC по виду тока; если батарея разряжается используем функцию разряда --> иначе функцию заряда

===================================================================================================================================================================
Система параллельно обрабатывает данные тестирования батарей LG HG2. 
1) калибровочные C20 файлы для создания эталонных кривых "напряжение-SOC". 
2) во всех тестовых файлах, преобразует сырые данные в структурированный формат. 
3) Для каждого файла рассчитывается (SOC) через комбинацию начального напряжения и кулоновского подсчета. 

4) Учитывается гистерезис батареи - разные кривые для заряда и разряда. 
5) Система создает интерполяционные функции, связывающие напряжение с SOC. 

6) Параллельная обработка ускоряет работу с множеством файлов. 

ИТОГ: Результаты включают данные с SOC и визуализацию в виде графиков. 
===================================================================================================================================================================
В чем важность обработки C20 файла - ?

C20 - это тест при токе, при котором батарея разряжается за 20 часов:
Для батареи 3Ah: ток C20 = 3Ah / 20h = 0.15A
Этот режим считается "щадящим" и дает наиболее точное значение реальной емкости
Без C20: Мы не знаем реальную максимальную емкость батареи
С C20: Мы точно знаем max_charge_capacity и max_discharge_capacity
===================================================================================================================================================================
Что за гимстерзис - ?

Гистерезис в данных о состоянии заряда (SoC) аккумулятора означает разницу в кривой зависимости напряжения от заряда между процессами зарядки и разрядки.

===================================================================================================================================================================
Создание функции интерполяции - ?
